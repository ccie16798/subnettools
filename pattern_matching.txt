st_scanf NOTE
=============
(some text here is copy&paste from scanf man page)

st_scanf() is a variation of regular scanf, but with the following notable differences :
- support additionnal conversion specifiers to automatically fill pointers to IP objects like struct subnet, struct ip_addr
- has not full support for all scanf specifiers; see below for supported ones;
- st_scanf is a full pattern-matching engine
- '%' is escaped with '\%' instead of '%%'
- space has no special meaning in st_scanf, a sequence of spaces must be matched by a regular expression' *' or ' +'

st_scanf() function scans input according to format as described below.  This format may contain conversion specifications; the results from
such conversions, if any, are stored in the locations pointed to by the pointer arguments that follow format.  Each pointer argument must be of a type that
is appropriate for the value returned by the corresponding conversion specification.

The format string consists of a sequence of 'sequence' which describe how to process the sequence of input characters.  If processing of a directive fails,
no further input is read, and scanf() returns. A sequence may be :

1. An ordinary character (i.e., one other than white space or '%').  This character must exactly match the next character of input.
2. A conversion specification, which commences with a '%' (percent) character.  A sequence of characters from the input is converted according to  this
specification,  and  the result is placed in the corresponding pointer argument.  If the next item of input does not match the conversion specification
tion, the conversion fails this is a matching failure.
3. A sequence of chars surrounded by ( ) (an expression in st_scanf)
4. A sequence of chars surrounded by  [ ]  (a char range)
5. The special char '.' that matches any input char

1 & 2 are scanf() compliant but 3+ are st_scanf()  additions
in st_scanf, a sequence can be followed by a special 'sequence multiplier'  (see below)

conversions specifiers
----------------------
st_scanf will use "conversion specifier" to fill user specified pointers with interpreted data from input string

Each conversion specification starts with the '%' char
- followed by an optional field_length (like '%40s');
- An optional type modifier character.  For example, the 'l' type modifier is used with integer conversions such
as %d to specify that the corresponding pointer argument refers to a long int rather than a pointer to an int
(only 'l' and 'h' are supported in st_scanf)

if field length is provided, st_scanf will copy (field_length - 1) chars from input, and add the terminating null byte

WRONG CODE :
	char buffer[10];
	st_scanf(input, "%s", buffer);  ==> can crash if input has more than 9chars
RIGHT CODE :
	char buffer[10];
	st_scanf(input, "%10s", buffer);  ==> cannot crash ; will copy NINE char from input and add the terminating null byte ('\0')

supported conversion specifiers
-------------------------------
%W : a WORD, a sequence of alphabetic chars; can be followed by another conversion specifier like (%d or %IP) 
for %W and %s, it is a good idea for the caller to specify a field_length, otherwise it will easily crash :

%I : an IP; scan for the longest sequence of IP chars "[0-9][a-f][A-F].:" and tries to interpret ; the next pointer must be a pointer to a 'struct ip_addr'

%P : a prefix in the form 'IP/mask' ; scan for the longest sequence of IP chars "[0-9][a-f][A-F].:/" and tries to interpret; the next pointer must be a pointer to a 'struct subnet "

%Q : same as %P except that input can be an IPv4 subnet with ending '0's removed, like '10/8, 172.17/16'

%S : same as '%s' but the pointer MUST not represent an IP
st_scanf("1.1.1.1", "%S", string) WILL return 0

%M : a mask; input can either represent 'unsigned int' or a ddn mask '255.255.255.0'

%s : a char range ending with SPACE (tabs, space, end of line) ; the next pointer must be a pointer to character array that  is  long  enough  to  hold  the  input
sequence  and  the terminating null byte ('\0'), which is added automatically

%c : a single CHAR; the next pointer must be a pointer to character array

%d : matches an optionally signed decimal integer; the next pointer must be a pointer to int (or short/long int depending on type modifier)

%u : matches an unsigned decimal integer; the next pointer must be a pointer to unsigned int (or short/long int depending on type modifier)

%x : matches and unsigned hexadecimal integer; string may or may not start with '0x'; the next pointer must be a pointer to unsigned int (or short/long int depending on type modifier)

%[  : matches a nonempty sequence of characters from the specified set of accepted characters; the next pointer must be a pointer to char, and there  must
be enough room for all the characters in the string, plus a terminating null byte.  The usual skip of leading white space is suppressed.  The string
is to be made up of characters in (or not in) a particular set; the set is defined by the characters between the open  bracket  [  character  and  a
close bracket ] character.  The set excludes those characters if the first character after the open bracket is a circumflex (^).  To include a close
bracket in the set, make it the first character after the open bracket or the circumflex; any other position will end the set.  The hyphen character
-  is  also special; when placed between two other characters, it adds all intervening characters to the set.  To include a hyphen, make it the last
character before the final close bracket.  For instance, [^]0-9-] means the set "everything except close bracket, zero through  nine,  and  hyphen".
The string ends with the appearance of a character not in the (or, with a circumflex, in) set or when the field width runs out


Pattern matching chars
======================

st_scanf() define the 3 following additional sequences :
[abcde-h] : any one of the chars in the brackets; see '%[' above; note that special chars ARE NOT interpreted inside a char range
.		: matches ANY character
(expr)		: a sequence to match;

expr can alse the form of '(expr_1|expr_2|...|expr_n)' ; the first expr to match will stop the pattern engine

Expressions can also contain one or more conversion specifier with '?' like
st_scanf("1.1.1.0 vlan55 2.2.2.2", "%I (%S )?%I", &ip, &device, &nhop)
st_scanf("1.1.1.0 2.2.2.2",        "%I (%S )?%I", &ip, &device, &nhop)


sequence multiplier
-------------------
* 	: the preceding sequence matches 0 or more times
+ 	: the preceding sequence matches 1 or more times
? 	: the preceding sequence matches 0 or 1 times
$ 	: the sequence expansion ends on the "last match" (see below)
{n,m}	: the sequence will need to match between n and m times; can have the form : 
{n}	: matches n times precisely
{,m}	: matches up to m times
{n,}	: matches at least n times



Understand '(expr)*' expansion, specifically '.*' expansion
===========================================================
(in the text below i'm talking about (EXPR)* expansion, but this applies equally to any other multiplier)

Wwhen does (expr)* expansion ends??  there are 3 cases to consider :
CASE 1 :  (EXPR)* expansion when expr is not '.'
------------------------------------------------
In that case, expansion will end when EXPR doesn't match anymore

CASE 2: .* expansion
--------------------
This case is more complicated since .* could match every char in the INPUT string, but that interpretation
would be uninteresting (though correct)

.* expansion ends based on the REMAINING chars of FMT (we call that REMAIN)


if REMAIN starts with a regular char :
------------------------------------
expansion will end on the first occurence of that char
st_scanf("abcdefghijk", ".*g"); expansion ends after 'abcdefg' 

etienne@debian:~/st$  ./subnet-tools -D scanf:3 scanf  "cdea1.1.1.1"   ".*a%I"                                                                         
sto_sscanf : Exiting loop with expr '.' matched 3 times, found 0 objects so far
1.1.1.1       
etienne@debian:~/st$  ./subnet-tools -D scanf:3 scanf  "cdea1.1.1.1"   ".*e%I"
sto_sscanf : Exiting loop with expr '.' matched 2 times, found 0 objects so far

if REMAIN is a conversion specifier :
--------------------------------------
let's take an exemple with FMT=".*%I"
==> for each char, it tries to determine if "REMAIN" is an IP; for example :
st_scanf("                   1.1.1.1", " *%I", string) will return "1.1.1.1"
".*%s"
==> on first non-space char
".*%[
==> on the first match of the char range
".*%c"
==> on the first non matching char (so '.*%c' is illegal) 
".*%S"
==> on the first string that DO NOT represent an IP
scanf("1.1.1.1 toto",  ".*%S", string) will set string to 'toto';
it will not set '.1.1.1', even if '.1.1.1' is not an IP; st_scanf detects that "1.1.1.1" is an IP
and thus skip the whole "1.1.1.1" string in its expansion

if next sequence is an expr (EXPR)
----------------------------------
expansion will end if the complete EXPR matches

pattern matching is done 'char by char' by default so ".*STRING" is not what you think it is :
st_scanf(" a 1.1.1.1 abcd 2.2.2.2", ".*abcd %I") will return 0 (expansion ends on second char 'a') 

etienne@debian:~/st$ ./subnet-tools -D scanf:3 scanf " a 1.1.1.1 abcd 2.2.2.2", ".*abcd %I" 
sto_sscanf : Exiting loop with expr '.' matched 1 times, found 0 objects so far
sto_sscanf : in[2]=' ', != fmt[3]='b', exiting

if you want expansion to end on 'abcd', write it like this :
st_scanf(" a 1.1.1.1 abcd 2.2.2.2", ".*(abcd) %I") will return 1, IP will be set to 2.2.2.2


Case 3 : last match .* expansion
--------------------------------
If '+' or '*' is preceded by a special '$' char, than means expansion will stop on the last occurence where :
(pos CAN stop AND previous pos CANNOT stop)
For example :
st_scanf("10.73.0.6/32 [115/200] via 10.73.10.106, 5d08h, Vlan860",  ".*$%s", string) will return 'Vlan860' ('Vlan860' is a STRING and ' Vlan860' is not)
it is important to understand AND '&& previous pos CANNOT stop' without that clause,
scanf("i L2     10.73.0.6/32 [115/200] via 10.73.10.106, 5d08h, Vlan860" ".*$%s") would return the last input char '0', which is a valid STRING.


Debugging your pattern
======================
subnet-tools -D scanf:3 scanf INPUT FMT
(-D scanf:8 if more debug is needed)

examples
========
NHOP & DEVICE of 'sh ipv6 route' ".*(via) (%I)?.*(%[^, ])?"   
prefix, GW, DEV of 'sh ip route' ".*%P.*(via) %I.*$%S" 
etienne@debian:~/st$  ./subnet-tools scanf  "S       194.51.71.149 [2/0] via 10.64.1.98, ezrezr, Vlan347"   ".*%I.*(via) %I.*$%S"
194.51.71.149 10.64.1.98 Vlan347
